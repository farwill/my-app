{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","line","this","includes","squares","rows","Array","fill","cells","position","rowsWrap","map","row","cellsWrap","cell","j","key","renderSquare","React","Component","Game","state","history","stepNumber","xIsNext","ascending","slice","length","calculateWinner","setState","concat","step","status","current","winner_line","winner","moves","move","col","Math","floor","desc","jumpTo","handleClick","toggle","reverse","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef9c3432.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  const className = `square ${props.highlight}`;\n  return (\n    <button className={className} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const line = this.props.line;\n    const highlight = (line && line.includes(i)) ? 'square-highlight' : '';\n    return (\n      <Square\n        value={this.props.squares[i]}\n        highlight={highlight}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    const rows = Array(3).fill(null);\n    const cells = rows;\n    let position = 0;\n    const rowsWrap = rows.map((row, i) => {\n      const cellsWrap = cells.map((cell, j) => {\n        // const position = (rows.length * i) + j;\n        return (\n          <span key={position}>{this.renderSquare(position++)}</span>\n        );\n      });\n      return (\n        <div className=\"board-row\" key={i}>{cellsWrap}</div>\n      );\n    });\n    return (\n      <div>\n        {rowsWrap}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        position: null,\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      ascending: true,\n    };\n  }\n  \n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n          position: i,\n        }\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n  \n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n  \n  toggle() {\n    this.setState({\n      ascending: !this.state.ascending,\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner_line = calculateWinner(current.squares);\n    const winner = winner_line ? winner_line.winner : null;\n    const line = winner_line ? winner_line.line : null;\n    const moves = history.map((step, move) => {\n      const position = step.position\n      const col = position % 3 + 1;\n      const row = Math.floor(position / 3 + 1);\n      const desc = move ?\n        'Go to move # ' + move + ' (' + col + ',' + row + ')':\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button\n            className={this.state.stepNumber === move ? 'btn-bold' : ''}\n            onClick={() => this.jumpTo(move)}\n          >\n            {desc}\n          </button>\n        </li>\n      );\n    })\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else if (this.state.stepNumber === 9) {\n      status = 'No Winner!';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    \n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            line={line}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.toggle()}>change order</button>\n          <ol>{this.state.ascending ? moves : moves.reverse()}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        line: [a, b, c],\n      }\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}